!=
%
%=
&
(
)
*
**
*=
+
+=
,
-
-=
->
.
/
//
//=
/=
:
:=
;
<
<<
<=
=
==
>
>=
>>
>>=
@
ERROR
[
\
]
^
_
aliased_import
and
argument_list
as
as_pattern
as_pattern_target
assert
assert_statement
assignment
attribute
augmented_assignment
binary_operator
block
boolean_operator
break
break_statement
call
case
case_clause
case_pattern
class
class_definition
comment
comparison_operator
concatenated_string
conditional_expression
constrained_type
continue
continue_statement
decorated_definition
decorator
def
default_parameter
del
delete_statement
dictionary
dictionary_comprehension
dotted_name
elif
elif_clause
else
else_clause
escape_sequence
except
except_clause
expression_list
expression_statement
false
float
for
for_in_clause
for_statement
format_expression
format_specifier
from
function_definition
generator_expression
generic_type
global
global_statement
identifier
if
if_clause
if_statement
import
import_from_statement
import_statement
in
integer
interpolation
is
is not
keyword_argument
lambda
lambda_parameters
line_continuation
list
list_comprehension
list_pattern
list_splat
list_splat_pattern
match
match_statement
module
named_expression
none
nonlocal
nonlocal_statement
not
not in
not_operator
or
pair
parameters
parenthesized_expression
pass
pass_statement
pattern_list
print
print_statement
raise
raise_statement
return
return_statement
set
set_comprehension
slice
string
string_content
string_end
string_start
subscript
true
try
try_statement
tuple
tuple_pattern
type
type_conversion
type_parameter
typed_parameter
unary_operator
while
while_statement
wildcard_import
with
with_clause
with_item
with_statement
yield
{
|
|=
}